name: Lunch CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  test-backend:
    runs-on: self-hosted
    permissions:
      contents: read
    steps:
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Clean with Gradle Wrapper
        run: ./gradlew clean

      - name: Unit Test with Gradle Wrapper
        run: ./gradlew test --tests "service.*"

  build-jar:
    needs: test-backend
    runs-on: self-hosted
    permissions:
      contents: read
    steps:
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Assemble with Gradle Wrapper
        run: ./gradlew assemble
        
      - uses: actions/upload-artifact@v4
        with: 
          name: upload-jar
          path: build/libs/team4-office-lunch-management-0.1-all.jar

  build-artifact:
    needs: build-jar
    runs-on: self-hosted
    permissions:
      contents: read
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with: 
          name: upload-jar
          path: .
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-south-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ci-team4-vishwa-and-selva
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
  dev-deployment:
    environment: Dev
    needs: build-artifact
    runs-on: self-hosted
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-south-1
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Pull image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ci-team4-vishwa-and-selva
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker pull \
          $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


      - name: Run container from Latest Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ci-team4-vishwa-and-selva
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker run -d -p 8081:8080 \
          -e JDBC_HOST=${{ secrets.JDBC_HOST }} \
          -e JDBC_PORT=${{ secrets.JDBC_PORT }} \
          -e DB_NAME=${{ secrets.DB_NAME }} \
          -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
          -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
          --name dev_backend \
          $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      

        

